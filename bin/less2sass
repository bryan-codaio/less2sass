#!/usr/bin/env node

var {Command} = require('commander');
var path = require('path');
var fs = require('fs');
var less2sass = require('..');
var mkdir = require('mkdirp').sync;

/**
 * Helpers.
 */

function log(type, msg, color){
  color = color || '36';
  var w = 10;
  var len = Math.max(0, w - type.length);
  var pad = Array(len + 1).join(' ');
  console.log('  \033[' + color + 'm%s\033[m : \033[90m%s\033[m', pad + type, msg);
}

function info(type, msg){
  log(type, msg);
}

function warn(type, msg){
  log(type, msg, '33');
}

function error(type, msg){
  log(type, msg, '31');
}

function write(path, str, forceWrite) {
  var fileAlreadyExists = fs.existsSync(path);
  if (fileAlreadyExists && !forceWrite) {
    warn('exists', path);
  } else {
    if (fileAlreadyExists) {
      warn('overwrite', path);
    } else {
      log('create', path, '32');
    }
    fs.writeFileSync(path, str);
  }
}

function isLessFile(filename) {
  return /\.less$/.test(filename);
}

function convert(filePath, forceWrite) {
  info('processing', filePath);

  var buffer = fs.readFileSync(filePath);
  var output = less2sass.convert(buffer.toString());
  var newPath = filePath.replace(/\.less$/, '.scss');

  write(newPath, output, forceWrite);
}

/**
 * Usage.
 */
const program = new Command()
  .name('less2sass')
  .description('Converts .less files to .scss (sass) files')
  .version(require('../package.json').version)
  .argument('<filepath>', 'The file (or directory) path to convert (can recursively convert all files in a directory)')
  .option('--force', 'Force less2sass to write out the new file, even if a .scss file already exists with at the destination.');

/**
 * Parse.
 */

program.parse(process.argv);

function read(filePath, options) {
  var fullPath = path.resolve(process.cwd(), filePath);
  var stats = fs.statSync(fullPath);
  info('scanning', fullPath);

  if (isLessFile(fullPath)) {
    convert(fullPath, options.force);
  }
  else if (stats.isDirectory()){
    var files = fs.readdirSync(fullPath);

    for (var i = 0; i < files.length; i++) {
      read(path.join(fullPath, files[i]), options);
    }
  }
}

function convertFiles(filePaths, options) {
  for (const filePath of filePaths) {
    read(filePath, options);
  }
}

convertFiles(program.args, program.opts());
